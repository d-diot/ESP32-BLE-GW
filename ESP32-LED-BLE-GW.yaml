esphome:
  name: esp32ledblegw
  platform: ESP32
  board: nodemcu-32s

wifi:
  ssid: "YOUR_WIFI_NET_NAME"
  password: "YOUR_WIFI_PASSWORD"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "esp32ledblegw Hotspot"
#    password: "d-diot.com"

#captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

globals:
  - id: fade_up
    type: bool
    restore_value: no
    initial_value: 'true'


# BLE config (see the log to find the MAC address of your BLE devices)
esp32_ble_tracker:


# Fan configuration
switch:
  - platform: gpio
    pin: GPIO15
    name: "Fan"
    id: "fan_1"
    internal: false
    icon: "mdi:fan"


# Dallas temperature sensor
dallas:
  - pin: GPIO4
    update_interval: 180s
    id: "dallas_1"


sensor:
# Wifi signal monitor
  - platform: wifi_signal
    name: "ESP32-BLE-GW WiFi Signal"
    update_interval: 60s
# Dallas temperature sensor
  - platform: dallas
    index: 0
    name: "d-diot hub int. temp."
    id: "temp_1"
    dallas_id: "dallas_1"
    on_value_range:
      - above: 45
        then:
          - switch.turn_on: fan_1
      - below: 45
        then:
          - switch.turn_off: fan_1
# BLE sensor    
#  - platform: ble_rssi
#    mac_address: XX:YY:ZZ:AA:BB:CC
#    name: "Your device name"


# Power suplly
power_supply:
# led strip 1
  - id: 'power_supply_1'
    pin: GPIO13
# led strip 2
  - id: 'power_supply_2'
    pin: GPIO27
# led strip 3
  - id: 'power_supply_3'
    pin: GPIO26
# led strip 4 (internal)
  - id: 'power_supply_4'
    pin: GPIO25


# Addressable LEDs (WS2812B) - STRIP 1,2,3,4 
light:
  # STRIP 1
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO32
    num_leds: 60
    rgb_order: GRB
    name: "LED Strip 1"
    id: "light_1"
    power_supply: 'power_supply_1'
# STRIP 2
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO33
    num_leds: 60
    rgb_order: GRB
    name: "LED Strip 2"
    id: "light_2"
    power_supply: 'power_supply_2'
# STRIP 3
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO16
    num_leds: 60
    rgb_order: GRB
    name: "LED Strip 3"
    id: "light_3"
    power_supply: 'power_supply_3'
# STRIP 4 (internal)
  - platform: fastled_clockless
    chipset: WS2812B
    pin: GPIO17
    num_leds: 24
    rgb_order: GRB
    name: "On board Lamp"
    id: "light_4"
    power_supply: 'power_supply_4'
    effects:
      # Use default parameters:
      - random:
      # Customize parameters
      - random:
          name: "Slow Random Effect"
          transition_length: 30s
          update_interval: 30s
      - random:
          name: "Fast Random Effect"
          transition_length: 4s
          update_interval: 5s
      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: True
              brightness: 100%
              red: 100%
              green: 90%
              blue: 0%
              duration: 500ms
            - state: False
              duration: 250ms
            - state: True
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 500ms
      - flicker:
      - flicker:
          name: Flicker Effect With Custom Values
          alpha: 95%
          intensity: 1.5%
      - addressable_rainbow:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - addressable_color_wipe:
      - addressable_color_wipe:
          name: Color Wipe Effect With Custom Values
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: False
      - addressable_scan:
      - addressable_scan:
          name: Scan Effect With Custom Values
          move_interval: 100ms
      - addressable_twinkle:
      - addressable_twinkle:
          name: Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 4ms
      - addressable_random_twinkle:
      - addressable_random_twinkle:
          name: Random Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 32ms
      - addressable_fireworks:
      - addressable_fireworks:
          name: Fireworks Effect With Custom Values
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120
      - addressable_flicker:
      - addressable_flicker:
          name: Addressable Flicker Effect With Custom Values
          update_interval: 16ms
          intensity: 5%
      - addressable_lambda:
          name: "Fire"
          update_interval: 15ms
          lambda: |-
            int Cooling = 55;
            int Sparking = 110;
            static byte heat[24];
            int cooldown;
            
            // Step 1.  Cool down every cell a little
            for( int i = 0; i < it.size(); i++) {
              cooldown = random(0, ((Cooling * 10) / it.size()) + 2);
              
              if(cooldown>heat[i]) {
                heat[i]=0;
              } else {
                heat[i]=heat[i]-cooldown;
              }
            }
            
            // Step 2.  Heat from each cell drifts 'up' and diffuses a little
            for( int k= it.size() - 1; k >= 2; k--) {
              heat[k] = (heat[k - 1] + heat[k - 2] + heat[k - 2]) / 3;
            }
            
            // Step 3.  Randomly ignite new 'sparks' near the bottom
            if( random(255) < Sparking ) {
              int y = random(7);
              heat[y] = heat[y] + random(160,255);
            }
            
            // Step 4.  Convert heat to LED colors
            for( int Pixel = 0; Pixel < it.size(); Pixel++) {
              // Scale 'heat' down from 0-255 to 0-191
              byte t192 = round((heat[Pixel]/255.0)*191);
             
              // calculate ramp up from
              byte heatramp = t192 & 0x3F; // 0..63
              heatramp <<= 2; // scale up to 0..252
             
              // figure out which third of the spectrum we're in:
              //this is where you can reverse the effect by switching the commented out lines in all 3 places.
              if( t192 > 0x80) {                     // hottest
                //it[it.size() - Pixel - 1] = ESPColor(255, 255, heatramp);
                it[Pixel] = ESPColor(255, 255, heatramp);
              } else if( t192 > 0x40 ) {             // middle
                //it[it.size() - Pixel - 1] = ESPColor(255, heatramp, 0);
                it[Pixel] = ESPColor(255, heatramp, 0);
              } else {                               // coolest
                //it[it.size() - Pixel - 1] = ESPColor(heatramp, 0, 0);
                it[Pixel] = ESPColor(heatramp, 0, 0);
              }
            }


binary_sensor:
# BLE devices example
#  - platform: ble_presence
#    mac_address: XX:YY:ZZ:AA:BB:CC
#    name: "Your device name"
# Button
  - platform: gpio
    pin: GPIO34
    name: "Button"
    id: "button_1"
    internal: true
    on_press:
      then:
        - if:
            condition:
              and:
                - light.is_on: "light_4"
                - lambda: |-
                    if(id(light_4).current_values.get_brightness() == 1.0) {
                      return true;
                    }
                    else {
                      return false;
                    }
            then:
              - lambda: |-
                  id(fade_up) = false;
        - if:
            condition:
              and:
                - light.is_on: "light_4"
                - lambda: |-
                    if(id(light_4).current_values.get_brightness() <= 0.15) {
                      return true;
                    }
                    else {
                      return false;
                    }
            then:
              - lambda: |-
                  id(fade_up) = true;
        - if:
            condition: 
              and:
                - lambda: |-
                    return id(fade_up);
                - light.is_on: "light_4"
            then:
              - while:
                  condition:
                    binary_sensor.is_on: "button_1"
                  then:
                    - light.dim_relative:
                        id: "light_4"
                        relative_brightness: 3%
                        transition_length: 0.1s
                    - delay: 0.1s
        - if:
            condition: 
              and:
                - lambda: |-
                    return !id(fade_up);
                - light.is_on: "light_4"
            then:
              - while:
                  condition:
                    binary_sensor.is_on: "button_1"
                  then:
                    - light.dim_relative:
                        id: "light_4"
                        relative_brightness: -3%
                        transition_length: 0.1s
                    - delay: 0.1s
    on_release:
      then:
        - lambda: |-
            id(fade_up) = !id(fade_up);
        - delay: 2s
        - if:
            condition:
              binary_sensor.is_off: "button_1"
            then:
              - lambda: |-
                  id(fade_up) = true;       
    on_click:
      then: 
        - light.toggle: "light_4"
        - lambda: |-
            id(fade_up) = true;
        - delay: 0.1s
